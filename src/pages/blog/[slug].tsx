/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import Head from "next/head";
import React from 'react';
import { useRouter } from 'next/router';
import { PrismaClient } from '@prisma/client';
import ContentRenderer from '../../components/organisms/ContentReader';
import Header from '~/components/organisms/Header';
import Title from '~/components/atoms/Title';
import Text from '~/components/atoms/Text';
import TableOfContent from '~/components/molecules/TableOfContent';

const prisma = new PrismaClient();

const BlogPage = ({ article, headings }: {article: Article, headings: ContentElement[]}) => {
  const router = useRouter();
  if (router.isFallback) {
    return <div>Loading...</div>;
  }

  const createdAtDate = new Date(article.createdAt);
  const options = { month: 'long' as const, day: 'numeric' as const, year: 'numeric' as const }
  const formattedCreatedAt = createdAtDate.toLocaleDateString('en-US', options)

  return (
    <>
      <Head>
        <title>{article.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='py-8'>
        <div className='mx-auto max-w-[640px]'>
          <Header />
        </div>
        <div className='grid grid-cols-[1fr,min(640px,100%),1fr] gap-4'>
          <div className='col-start-2 xl:col-start-2 xl:col-span-2 py-4 max-w-3xl'>
            <Title tag='h1' size='xl'>{article.title}</Title>
            <Text tag='p' size='base'>{formattedCreatedAt}</Text>
          </div>
          <ContentRenderer contentElements={article.contentElements} />
          <TableOfContent headings={headings} />
        </div>
      </div>
    </>
  );
};

export async function getStaticPaths() {
  const articles = await prisma.article.findMany({
    include: { contentElements: true },
  });
  const paths = articles.map((article) => ({
    params: { slug: article.slug },
  }));

  return { paths, fallback: true };
}

export async function getStaticProps({ params }: {params: {slug: string}}) {
  const article = await prisma.article.findUnique({
    where: { slug: params.slug },
    include: { contentElements: true },
  });

  const tableOfContentHeadings = article?.contentElements.filter((content) => content.type === 'heading')

  return { props: { article: JSON.parse(JSON.stringify(article)), headings: tableOfContentHeadings }, revalidate: 1 };
}

export default BlogPage;

export interface Article {
  id: string;
  title: string;
  slug: string;
  published: boolean;
  createdAt: string;
  contentElements: ContentElement[];
}

export interface ContentElement {
  id: string;
  type: string;
  content: string;
  imgCaption?: string;
  order: number;
  articleId: string;
}
